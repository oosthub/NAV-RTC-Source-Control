OBJECT Table 77777 SourceControlSetup
{
  OBJECT-PROPERTIES
  {
    Date=28/02/19;
    Time=09:59:03 PM;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               User_ID := USERID;
               IF (Type <> Type::Repo) AND (Type <> Type::"PS Module") THEN
               BEGIN
                 SourceControlSetup.RESET;
                 SourceControlSetup.SETRANGE(User_ID,USERID);
                 SourceControlSetup.SETRANGE(Type,Type);
                 IF NOT SourceControlSetup.ISEMPTY THEN
                   ERROR(err001,FORMAT(Type));
               END;
             END;

    OnRename=BEGIN
               ERROR(err003);
             END;

    LookupPageID=Page77779;
    DrillDownPageID=Page77779;
  }
  FIELDS
  {
    { 10  ;   ;User_ID             ;Code50         }
    { 20  ;   ;Type                ;Option        ;OptionString=Repo,Text Editor,Compare Tool,PS Module }
    { 30  ;   ;Local Repo Path     ;Text250        }
    { 31  ;   ;Local Project Path  ;Text250        }
    { 35  ;   ;Name                ;Text100        }
    { 40  ;   ;Remote Repo Path    ;Text250        }
    { 45  ;   ;Upstream Repo name  ;Text100        }
    { 50  ;   ;Branch              ;Text100        }
    { 60  ;   ;DB Server           ;Text50         }
    { 70  ;   ;DB Name             ;Text50         }
    { 500 ;   ;Default             ;Boolean       ;OnValidate=BEGIN
                                                                IF (Type = Type::Repo) AND Default THEN
                                                                BEGIN
                                                                  SourceControlSetup.RESET;
                                                                  SourceControlSetup.SETRANGE(User_ID,USERID);
                                                                  SourceControlSetup.SETRANGE(Default,TRUE);
                                                                  IF SourceControlSetup.FINDFIRST THEN
                                                                  BEGIN
                                                                    SourceControlSetup.Default := FALSE;
                                                                    SourceControlSetup.MODIFY;
                                                                  END;
                                                                END ELSE
                                                                  ERROR(err002);
                                                              END;
                                                               }
  }
  KEYS
  {
    {    ;User_ID,Type,Name                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      err001@1000 : TextConst 'ENU=You can only have one entry of type %1';
      err002@1001 : TextConst 'ENU=Default can only be set for Repo''s';
      SourceControlSetup@1002 : Record 77777;
      err003@1003 : TextConst 'ENU=Rename is not Allowed, Please delete and recreate the record';

    BEGIN
    END.
  }
}

OBJECT Table 77778 SourceControlMonitor
{
  OBJECT-PROPERTIES
  {
    Date=01/03/19;
    Time=07:43:21 AM;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    DataPerCompany=No;
  }
  FIELDS
  {
    { 1   ;   ;NavisionAuditID     ;Integer       ;AutoIncrement=Yes }
    { 2   ;   ;Changed             ;DateTime       }
    { 3   ;   ;User_ID             ;Code50         }
    { 4   ;   ;ObjectType          ;Option        ;OptionCaptionML=ENU=TableData,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System,FieldNumber;
                                                   OptionString=TableData,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System,FieldNumber }
    { 5   ;   ;ObjectID            ;Integer        }
    { 6   ;   ;ObjectName          ;Text30         }
    { 7   ;   ;DatabaseName        ;Text250        }
    { 8   ;   ;ChangeType          ;Text3          }
    { 9   ;   ;VersionList         ;Text80         }
    { 10  ;   ;CompanyName         ;Text30         }
  }
  KEYS
  {
    {    ;NavisionAuditID                         ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Page 77777 Source Control
{
  OBJECT-PROPERTIES
  {
    Date=01/03/19;
    Time=11:01:50 AM;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table2000000001;
    PageType=ListPlus;
    PromotedActionCategoriesML=ENU=New,Process,Reports,View,Compare,Pull,Export / Import,Git;
    OnOpenPage=BEGIN
                 RESET;
                 FILTERGROUP(10);
                 SETFILTER(Type,'%1|%2|%3|%4|%5|%6|%7|%8',1,3,4,5,6,7,8,9);
                 FILTERGROUP(0);
                 FINDFIRST;

                 ReadSetup;
                 OpenPsRunspace;
               END;

    OnClosePage=BEGIN
                  ClosePsRunspace;
                END;

    OnAfterGetRecord=BEGIN
                       ColorChange;
                     END;

    OnDeleteRecord=VAR
                     DeleteFile@1101770000 : File;
                   BEGIN
                     GetFile1(SCCurrentRepo,Rec,FALSE);
                     IF DeleteFile.OPEN(FileName1) THEN
                     BEGIN
                       DeleteFile.CLOSE;
                       ERASE(FileName1);
                     END;
                   END;

    OnAfterGetCurrRecord=BEGIN
                           ColorChange;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 24      ;1   ;ActionGroup;
                      CaptionML=ENU=Objects }
      { 23      ;2   ;Action    ;
                      CaptionML=ENU=&All;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=AllLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterObjects(0); // 0 is handled as all in function
                               END;
                                }
      { 1       ;2   ;Action    ;
                      CaptionML=ENU=Ta&ble;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Table;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterObjects(1);
                               END;
                                }
      { 22      ;2   ;Action    ;
                      CaptionML=ENU=Pa&ge;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=TaskPage;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterObjects(8);
                               END;
                                }
      { 17      ;2   ;Action    ;
                      CaptionML=ENU=Re&port;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Report;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterObjects(3);
                               END;
                                }
      { 20      ;2   ;Action    ;
                      CaptionML=ENU=&Codeunit;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=DesignCodeBehind;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterObjects(5);
                               END;
                                }
      { 19      ;2   ;Action    ;
                      CaptionML=ENU=&XMLport;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=XMLFile;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterObjects(6);
                               END;
                                }
      { 16      ;2   ;Action    ;
                      CaptionML=ENU=&Query;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Questionnaire;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterObjects(9);
                               END;
                                }
      { 21      ;2   ;Action    ;
                      CaptionML=ENU=Menu&Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExpandAll;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterObjects(7);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 15      ;1   ;ActionGroup;
                      CaptionML=ENU=Vie&w }
      { 14      ;2   ;Action    ;
                      Name=AcViewCurr;
                      CaptionML=ENU=C&urrent File;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=XMLFile;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ViewFile(TRUE);
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=AcViewRepo;
                      CaptionML=ENU=R&epo File;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=XMLFileGroup;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ViewFile(FALSE);
                               END;
                                }
      { 12      ;2   ;Action    ;
                      Name=AcViewHistory;
                      CaptionML=ENU=&File History;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CreateXMLFile;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ViewHistory(TRUE);
                               END;
                                }
      { 7       ;2   ;Action    ;
                      Name=AcViewRepoHistory;
                      CaptionML=ENU=&Repo History;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CreateDocuments;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ViewHistory(FALSE);
                               END;
                                }
      { 25      ;2   ;Action    ;
                      Name=AcViewRepoStatus;
                      CaptionML=ENU=Repo S&tatus;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Status;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ViewStatus;
                               END;
                                }
      { 11      ;1   ;ActionGroup;
                      CaptionML=ENU=Compa&re }
      { 10      ;2   ;Action    ;
                      Name=AcCompCurr;
                      CaptionML=ENU=C&urrent DB File vs Selected Repo File;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CompareContacts;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 CompareFile(TRUE);
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=AcCompRepo;
                      CaptionML=ENU=Current R&epo File vs Selected Repo File;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CompareCOA;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 CompareFile(FALSE);
                               END;
                                }
      { 8       ;1   ;ActionGroup;
                      CaptionML=ENU=&Pull }
      { 6       ;2   ;Action    ;
                      Name=AcPullRepo;
                      CaptionML=ENU=Pull Latest Version of Entire &Repo;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=GetSourceDoc;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 IF NOT ResetHard THEN
                                   ERROR(txt_Abort);
                               END;
                                }
      { 5       ;1   ;ActionGroup;
                      CaptionML=ENU=Export / Import }
      { 4       ;2   ;Action    ;
                      Name=AcExport;
                      CaptionML=ENU=&Export to Repo;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExportElectronicDocument;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 ExportToRepo(FALSE);
                               END;
                                }
      { 2       ;2   ;Action    ;
                      Name=AcExportAll;
                      CaptionML=ENU=Export All To Repo;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExportElectronicDocument;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 ExportAllToRepo(FALSE);
                               END;
                                }
      { 3       ;2   ;Action    ;
                      Name=AcImport;
                      CaptionML=ENU=&Import From Repo;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Import;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 IF ResetHard THEN
                                   ImportFromRepo
                                 ELSE
                                   ERROR(txt_Abort);
                               END;
                                }
      { 29      ;1   ;ActionGroup;
                      CaptionML=ENU=Git }
      { 28      ;2   ;Action    ;
                      Name=AcCommit;
                      CaptionML=ENU=Stage and Commit;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Holiday;
                      PromotedCategory=Category8;
                      OnAction=BEGIN
                                 DoCommit;
                               END;
                                }
      { 30      ;2   ;Action    ;
                      Name=AcPush;
                      CaptionML=ENU=Push;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MoveUp;
                      PromotedCategory=Category8;
                      OnAction=VAR
                                 lTempPath@1000 : Text;
                               BEGIN
                                 DoPush;
                               END;
                                }
      { 32      ;2   ;Action    ;
                      Name=AcSetupLocalRepos;
                      CaptionML=ENU=Setup Local Repo's;
                      Image=XMLSetup;
                      OnAction=BEGIN
                                 SetupRepos;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1901084101;1;Group  ;
                CaptionML=ENU=Settings and Filters;
                GroupType=Group }

    { 26  ;2   ;Group     ;
                GroupType=GridLayout;
                Layout=Rows }

    { 36  ;3   ;Group     ;
                GroupType=Group }

    { 35  ;4   ;Field     ;
                CaptionML=ENU=Current Repo;
                SourceExpr=lbl_Me;
                TableRelation=SourceControlMonitor WHERE (User_ID=FILTER(@%USER%));
                Editable=false;
                Style=StrongAccent;
                StyleExpr=TRUE;
                ShowCaption=No }

    { 34  ;4   ;Field     ;
                CaptionML=ENU=From;
                SourceExpr=lbl_Other;
                TableRelation=SourceControlMonitor WHERE (User_ID=FILTER(<>@%USER%));
                Editable=false;
                Style=Ambiguous;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             IF ToDate = 0D THEN
                               ToDate := FromDate;
                             IF (FromDate <> 0D) AND (ToDate <> 0D) THEN
                               SETRANGE(Date,FromDate,ToDate);
                             CurrPage.UPDATE;
                           END;

                ShowCaption=No }

    { 33  ;4   ;Field     ;
                CaptionML=ENU=To;
                SourceExpr=lbl_More;
                TableRelation=SourceControlMonitor;
                Editable=false;
                Style=Unfavorable;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             IF (FromDate = 0D) OR (FromDate > ToDate) THEN
                               FromDate := ToDate;
                             IF (FromDate <> 0D) AND (ToDate <> 0D) THEN
                               SETRANGE(Date,FromDate,ToDate);
                             CurrPage.UPDATE;
                           END;

                ShowCaption=No }

    { 31  ;3   ;Group     ;
                GroupType=Group }

    { 1101770065;4;Field  ;
                AssistEdit=Yes;
                CaptionML=ENU=Current Repo;
                SourceExpr=SCCurrentRepo.Name;
                TableRelation=SourceControlSetup.Name WHERE (Type=CONST(Repo));
                Importance=Promoted;
                OnAssistEdit=BEGIN
                               HYPERLINK(SCCurrentRepo."Local Repo Path");
                             END;
                              }

    { 18  ;4   ;Field     ;
                CaptionML=ENU=From;
                SourceExpr=FromDate;
                OnValidate=BEGIN
                             IF ToDate = 0D THEN
                               ToDate := FromDate;
                             IF (FromDate <> 0D) AND (ToDate <> 0D) THEN
                               SETRANGE(Date,FromDate,ToDate);
                             CurrPage.UPDATE;
                           END;
                            }

    { 27  ;4   ;Field     ;
                CaptionML=ENU=To;
                SourceExpr=ToDate;
                OnValidate=BEGIN
                             IF (FromDate = 0D) OR (FromDate > ToDate) THEN
                               FromDate := ToDate;
                             IF (FromDate <> 0D) AND (ToDate <> 0D) THEN
                               SETRANGE(Date,FromDate,ToDate);
                             CurrPage.UPDATE;
                           END;
                            }

    { 1101770015;1;Group  ;
                GroupType=Repeater }

    { 38  ;2   ;Field     ;
                CaptionML=ENU=Change By;
                SourceExpr=ChangedBy;
                Editable=false;
                StyleExpr=txtStyle }

    { 1101770014;2;Field  ;
                SourceExpr=Type;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770013;2;Field  ;
                SourceExpr=ID;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770012;2;Field  ;
                SourceExpr=Name;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770011;2;Field  ;
                SourceExpr=Caption;
                Visible=FALSE;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770010;2;Field  ;
                SourceExpr="Company Name";
                Visible=FALSE;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770009;2;Field  ;
                SourceExpr=Modified;
                Editable=TRUE;
                StyleExpr=txtStyle }

    { 1101770008;2;Field  ;
                SourceExpr="Version List";
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770007;2;Field  ;
                SourceExpr=Date;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770006;2;Field  ;
                SourceExpr=Time;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770005;2;Field  ;
                SourceExpr=Compiled;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770004;2;Field  ;
                SourceExpr=Locked;
                StyleExpr=txtStyle }

    { 1101770003;2;Field  ;
                SourceExpr="Locked By";
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770002;2;Field  ;
                SourceExpr="BLOB Size";
                Visible=FALSE;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770001;2;Field  ;
                SourceExpr="BLOB Reference";
                Visible=FALSE;
                Editable=FALSE;
                StyleExpr=txtStyle }

    { 1101770000;2;Field  ;
                SourceExpr="DBM Table No.";
                Visible=FALSE;
                Editable=FALSE;
                StyleExpr=txtStyle }

  }
  CODE
  {
    VAR
      MyObject@1004 : Record 2000000001;
      ThreeTierMgt@1002 : Codeunit 419;
      SCSetup@1003 : Record 77777;
      SCCurrentRepo@1019 : Record 77777;
      SCCompareRepo@1017 : Record 77777;
      SCMonitor@1026 : Record 77778;
      TextEditor@1101770020 : Text;
      ComparePath@1016 : Text;
      FileName1@1101770008 : Text[1024];
      FileName2@1101770009 : Text[1024];
      Text001@1101770022 : TextConst 'ENU=Processing object #1##### #2######## #3###################\\';
      FromDate@1001 : Date;
      ToDate@1000 : Date;
      Window@1005 : Dialog;
      PSRunner@1010 : DotNet "'Microsoft.Dynamics.Nav.PowerShellRunner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PowerShellRunner" RUNONCLIENT;
      PSObject@1011 : DotNet "'Microsoft.Dynamics.Nav.PowerShellRunner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PSObjectAdapter" RUNONCLIENT;
      txt_ExportAll@1006 : TextConst 'ENU=Exporting All Objects';
      txt_split@1007 : TextConst 'ENU=Splitting Objects';
      txt_BranchUp@1008 : TextConst 'ENU=Branch Updated';
      txt_complete@1009 : TextConst 'ENU=Opperation Complete';
      txt_createRepo@1020 : TextConst 'ENU=Creating Repo for #1#########';
      window_message@1012 : TextConst 'ENU=#1##################################';
      txt_WarnSync@1013 : TextConst 'ENU=WARNING!\This Action will (First) Reset Your Branch to Upstream Head before performing any other actions.\You will lose ALL Un-Committed Changes!!!!!! \Make Sure you have all required Changes Committed before Performing this Action.\Are you Sure you want to Continue?';
      txt_Abort@1014 : TextConst 'ENU=Action aborted by User!';
      txt_Push@1015 : TextConst 'ENU=Your Commits Will Now be Pushed Upstream.';
      err001@1018 : TextConst 'ENU=No %1 found. Please make sure your setup is correct';
      txtStyle@1021 : Text;
      err002@1027 : TextConst 'ENU=No File " %1 " found. Something went wrong. Check Event Viewer';
      lbl_Me@1022 : TextConst 'ENU=Changed By Me';
      lbl_Other@1023 : TextConst 'ENU=Changed by Another';
      lbl_More@1024 : TextConst 'ENU=Changed by More than One';
      ChangedBy@1025 : Code[50];

    PROCEDURE Type2Prefix@1210130004(Type@1210130000 : 'TableData,Table,Form,Report,Dataport,Codeunit,XMLport,Menusuite,Page,Query') : Code[3];
    VAR
      prefix@1210130001 : Code[3];
    BEGIN
      CASE Type OF
        Type::Table:
          prefix := 'TAB';
        Type::Form:
          prefix := 'FOR';
        Type::Report:
          prefix := 'REP';
        Type::Dataport:
          prefix := 'DAT';
        Type::Codeunit:
          prefix := 'COD';
        Type::XMLport:
          prefix := 'XML';
        Type::Menusuite:
          prefix := 'MEN';
        Type::Page:
          prefix := 'PAG';
        Type::Query:
          prefix := 'QUE';

        ELSE
          prefix := 'ERR';
      END;

      EXIT(prefix)
    END;

    PROCEDURE Prefix2Type@18(Type@1210130000 : Text[3]) : Integer;
    VAR
      lObjectType@1210130001 : Integer;
    BEGIN
      CASE Type OF
        'TAB':
          lObjectType := 1;
        'FOR':
          lObjectType := 2;
        'REP':
          lObjectType := 3;
        'DAT':
          lObjectType := 4;
        'COD':
          lObjectType := 5;
        'XML':
          lObjectType := 6;
        'MEN':
          lObjectType := 7;
        'PAG':
          lObjectType := 8;
        'QUE':
          lObjectType := 9;

        ELSE
          lObjectType := -1;
      END;

      EXIT(lObjectType);
    END;

    PROCEDURE GetFile1@1101770001(VAR pRepo@1001 : Record 77777;VAR pObj@1000 : Record 2000000001;pIsTemp@1002 : Boolean);
    BEGIN
      FileName1 := COPYSTR(STRSUBSTNO('%1%2.TXT', Type2Prefix(pObj.Type), pObj.ID), 1, MAXSTRLEN(FileName1));
      IF NOT pIsTemp THEN
        FileName1 := pRepo."Local Repo Path" + FileName1
      ELSE
        FileName1 := GetPathTEMP + FileName1;
    END;

    PROCEDURE GetFile2@15(VAR pRepo@1001 : Record 77777;VAR pObj@1000 : Record 2000000001;pIsTemp@1002 : Boolean);
    BEGIN
      FileName2 := COPYSTR(STRSUBSTNO('%1%2.TXT', Type2Prefix(pObj.Type), pObj.ID), 1, MAXSTRLEN(FileName2));
      IF NOT pIsTemp THEN
        FileName2 := pRepo."Local Repo Path" + FileName2
      ELSE
        FileName2 := GetPathTEMP + FileName2;
    END;

    PROCEDURE GetFileOnly@5(VAR pObj@1000 : Record 2000000001) : Text;
    VAR
      lFileOnly@1001 : Text;
    BEGIN
      lFileOnly := COPYSTR(STRSUBSTNO('%1%2.TXT', Type2Prefix(pObj.Type), pObj.ID), 1, MAXSTRLEN(lFileOnly));
      EXIT(lFileOnly);
    END;

    PROCEDURE GetPathTEMP@4() : Text;
    VAR
      lPath@1000 : Text;
    BEGIN
      lPath := ThreeTierMgt.GetDirectoryName(ThreeTierMgt.ClientTempFileName(''));
      lPath := COPYSTR(lPath,1,STRLEN(lPath));
      EXIT(lPath + '\');
    END;

    PROCEDURE ExportToRepo@1101770002(pIsTemp@1101770000 : Boolean);
    VAR
      TempFile@1101770002 : Text[1024];
    BEGIN
      //////////////////////////////////////////////////////
      // If pIsTemp is TRUE - export to temp Location
      // If False - Use Current Repo Local Path
      /////////////////////////////////////////////////////
      MyObject.RESET;
      CurrPage.SETSELECTIONFILTER(MyObject);

      IF MyObject.FINDSET THEN
      BEGIN
        Window.OPEN(Text001);
        REPEAT
          GetFile1(SCCurrentRepo,MyObject,pIsTemp);
          Window.UPDATE(1, FORMAT(MyObject.Type));
          Window.UPDATE(2, FORMAT(MyObject.ID));
          Window.UPDATE(3, MyObject.Name);
          //Export-NAVApplicationObject MyApp COD1-10.txt -Filter 'Type=Codeunit;Id=1..10'
          DoExport('Type=' + FORMAT(MyObject.Type) + ';Id='+FORMAT(MyObject.ID));
        UNTIL MyObject.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE ExportAllToRepo@3(pIsTemp@1101770000 : Boolean);
    VAR
      TempFile@1101770002 : Text[1024];
      LocalCounter@1000 : Integer;
    BEGIN
      //////////////////////////////////////////////////////
      // If pIsTemp is TRUE - export to temp Location
      // If False - Use Current Repo Local Path
      /////////////////////////////////////////////////////

      Window.OPEN(window_message);
      Window.UPDATE(1,txt_ExportAll);
      FileName1 := GetPathTEMP + 'All.TXT';
      PSRunner.AddCommand('Export-NAVApplicationObject');
      PSRunner.AddParameter('DatabaseName',SCCurrentRepo."DB Name");
      PSRunner.AddParameter('DatabaseServer',SCCurrentRepo."DB Server");
      PSRunner.AddParameter('Path',FileName1);
      PSRunner.AddParameter('Force',TRUE);
      PSRunner.AddParameter('Verbose',TRUE);
      PSRunner.WriteEventOnError(TRUE);
      LocalCounter := 0;
      PSRunner.BeginInvoke;
      REPEAT
        LocalCounter := LocalCounter + 1;
        CASE LocalCounter OF
          1: Window.UPDATE(1,txt_ExportAll + ' -         ');
          2: Window.UPDATE(1,txt_ExportAll + ' --        ');
          3: Window.UPDATE(1,txt_ExportAll + ' ---       ');
          4: Window.UPDATE(1,txt_ExportAll + ' --->      ');
          5: Window.UPDATE(1,txt_ExportAll + '  --> #    ');
          6: Window.UPDATE(1,txt_ExportAll + '   -> ##   ');
          7: Window.UPDATE(1,txt_ExportAll + '    > ###  ');
          8: Window.UPDATE(1,txt_ExportAll + '      #### ');
        END; //end Case
        IF LocalCounter = 8 THEN
          LocalCounter := 0;
        SLEEP(1000);
      UNTIL PSRunner.IsCompleted;

      Window.UPDATE(1,txt_split);
      PSRunner.AddCommand('Split-NAVApplicationObjectFile');
      PSRunner.AddParameter('Source',FileName1);
      PSRunner.AddParameter('Destination',SCCurrentRepo."Local Repo Path");
      PSRunner.AddParameter('PreserveFormatting',TRUE);
      PSRunner.AddParameter('Force',TRUE);
      PSRunner.AddParameter('Verbose',TRUE);
      PSRunner.WriteEventOnError(TRUE);
      LocalCounter := 0;
      PSRunner.BeginInvoke;
      REPEAT
        LocalCounter := LocalCounter + 1;
        CASE LocalCounter OF
          1: Window.UPDATE(1,txt_split + ' ####      ');
          2: Window.UPDATE(1,txt_split + ' # ###     ');
          3: Window.UPDATE(1,txt_split + ' # # ##    ');
          4: Window.UPDATE(1,txt_split + ' # # # #   ');
          5: Window.UPDATE(1,txt_split + '   # # # # ');
          6: Window.UPDATE(1,txt_split + ' #   # # # ');
          7: Window.UPDATE(1,txt_split + ' ##    # # ');
          8: Window.UPDATE(1,txt_split + ' ###     # ');
        END; //end Case
        IF LocalCounter = 8 THEN
          LocalCounter := 0;
        SLEEP(1000);
      UNTIL PSRunner.IsCompleted;
      Window.CLOSE;
    END;

    PROCEDURE ImportFromRepo@1101770003();
    BEGIN
      CurrPage.SETSELECTIONFILTER(MyObject);

      IF MyObject.FINDSET THEN
      BEGIN
        Window.OPEN(Text001);
        REPEAT
          GetFile1(SCCurrentRepo,MyObject,FALSE);
          Window.UPDATE(1, MyObject.Type);
          Window.UPDATE(2, FORMAT(MyObject.ID));
          Window.UPDATE(3, MyObject.Name);
          PSRunner.AddCommand('Import-NAVApplicationObject');
          PSRunner.AddParameter('DatabaseName',SCCurrentRepo."DB Name");
          PSRunner.AddParameter('DatabaseServer',SCCurrentRepo."DB Server");
          PSRunner.AddParameter('Path',FileName1);
          //PSRunner.AddParameter('Force',TRUE);
          PSRunner.AddParameter('Verbose',TRUE);
          PSRunner.WriteEventOnError(TRUE);
          PSRunner.BeginInvoke;
          REPEAT
            SLEEP(1000);
          UNTIL PSRunner.IsCompleted;
          //IMPORTOBJECTS(FileName1, 0);
        UNTIL MyObject.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    LOCAL PROCEDURE SelectCompareRepo@1(pFilterOutCurrent@1001 : Boolean);
    VAR
      SCSetupList@1000 : Page 77779;
    BEGIN
      SCCompareRepo.RESET;
      SCCompareRepo.SETRANGE(User_ID,USERID);
      SCCompareRepo.SETRANGE(Type,SCCompareRepo.Type::Repo);
      IF pFilterOutCurrent THEN
        SCCompareRepo.SETFILTER(Name,'<>%1',SCCurrentRepo.Name);
      IF SCCompareRepo.FINDSET THEN
        SCCompareRepo := SCCurrentRepo;

      CLEAR(SCSetupList);
      SCSetupList.SETTABLEVIEW(SCCompareRepo);
      SCSetupList.SETRECORD(SCCompareRepo);
      SCSetupList.LOOKUPMODE(TRUE);

      IF SCSetupList.RUNMODAL = ACTION::LookupOK THEN
        SCSetupList.GETRECORD(SCCompareRepo);
    END;

    PROCEDURE ReadSetup@1101770005();
    VAR
      MySetupFile@1101770000 : File;
      BufferTxt@1101770002 : Text[250];
      MyVar@1101770001 : Text[80];
      MyPath@1101770003 : Text[100];
    BEGIN
      SCSetup.RESET;
      SCSetup.SETRANGE(User_ID,USERID);

      //Text Editor
      SCSetup.SETRANGE(Type,SCSetup.Type::"Text Editor");
      IF SCSetup.FINDFIRST THEN
        TextEditor := SCSetup."Local Repo Path"
      ELSE
        ERROR(err001,FORMAT(SCSetup.Type::"Text Editor"));

      //Compare tool
      SCSetup.SETRANGE(Type,SCSetup.Type::"Compare Tool");
      IF SCSetup.FINDFIRST THEN
        ComparePath := SCSetup."Local Repo Path"
      ELSE
        ERROR(err001,FORMAT(SCSetup.Type::"Compare Tool"));

      //Default Repo
      SCSetup.SETRANGE(Type,SCSetup.Type::Repo);
      SCSetup.SETRANGE(Default,TRUE);
      IF NOT SCSetup.FINDFIRST THEN
        SCSetup.SETRANGE(Default);
      IF SCSetup.FINDFIRST THEN
      BEGIN
        SCCurrentRepo := SCSetup;
        SCCurrentRepo.FIND;
      END ELSE
        ERROR(err001,FORMAT(SCSetup.Type::Repo));
    END;

    LOCAL PROCEDURE ResetHard@6() : Boolean;
    VAR
      lSyncFile@1000 : Text;
      lTempPath@1001 : Text;
    BEGIN
      IF CONFIRM(txt_WarnSync,FALSE) THEN
      BEGIN
        lTempPath := GetPathTEMP;
        PSRunner.AddCommand('Git-ResetHard');
        PSRunner.AddParameter('Path',SCCurrentRepo."Local Repo Path");
        PSRunner.AddParameter('Repo',SCCurrentRepo."Upstream Repo name");
        PSRunner.AddParameter('Branch',SCCurrentRepo.Branch);
        PSRunner.AddParameter('LogPath',lTempPath + 'SyncLog.log');
        PSRunner.AddParameter('Editor',TextEditor);
        //PSRunner.AddParameter('Hard','$true');
        PSRunner.WriteEventOnError(TRUE);
        PSRunner.BeginInvoke;
        REPEAT
          SLEEP(1000);
        UNTIL PSRunner.IsCompleted;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE DoExport@2(pFilter@1000 : Text);
    BEGIN
      PSRunner.AddCommand('Export-NAVApplicationObject');
      PSRunner.AddParameter('DatabaseName',SCCurrentRepo."DB Name");
      PSRunner.AddParameter('DatabaseServer',SCCurrentRepo."DB Server");
      PSRunner.AddParameter('Path',FileName1);
      IF pFilter <> '' THEN
        PSRunner.AddParameter('Filter',pFilter);
      PSRunner.AddParameter('Force',TRUE);
      PSRunner.AddParameter('Verbose',TRUE);
      PSRunner.WriteEventOnError(TRUE);
      PSRunner.BeginInvoke;
      REPEAT
        SLEEP(1000);
      UNTIL PSRunner.IsCompleted;
    END;

    LOCAL PROCEDURE FilterObjects@7(pObjectType@1000 : Integer);
    BEGIN
      FILTERGROUP(10);
      IF (pObjectType = 0) OR (pObjectType = 1) THEN
        SETRANGE("Company Name",'');
      IF pObjectType = 0 THEN
        SETFILTER(Type,'%1|%2|%3|%4|%5|%6|%7|%8',1,3,4,5,6,7,8,9)
      ELSE
        SETFILTER(Type,'%1',pObjectType);
      FILTERGROUP(0);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ViewFile@11(pViewDBFile@1000 : Boolean);
    BEGIN
      ///////////////////////////////////////
      // pViewDBFile = FALSE  -> View the File in the Repo Directory
      // pViewDBFile = TRUE   -> Export Object to Temp and View
      //////////////////////////////////////

      IF pViewDBFile THEN
        ExportToRepo(TRUE); //temp location
      GetFile1(SCCurrentRepo,Rec,pViewDBFile);
      PSRunner.AddCommand('Git-ViewFile');
      PSRunner.AddParameter('Path',FileName1);
      PSRunner.AddParameter('Editor',TextEditor);
      PSRunner.WriteEventOnError(TRUE);
      PSRunner.BeginInvoke;
      REPEAT
        SLEEP(1000);
      UNTIL PSRunner.IsCompleted;
    END;

    LOCAL PROCEDURE ViewHistory@14(pFileOnly@1000 : Boolean);
    VAR
      lTempPath@1001 : Text;
      lLogFile@1002 : Text;
    BEGIN
      ///////////////////////////////////////
      // pFileOnly = FALSE  -> View the History of the Repo
      // pFileOnly = TRUE   -> View the History of selected File
      //////////////////////////////////////

      lTempPath := GetPathTEMP;
      IF pFileOnly THEN
        lLogFile := GetFileOnly(Rec) + '.log'
      ELSE
        lLogFile := 'RepoCommitLog.log';
      PSRunner.AddCommand('Git-Log');
      PSRunner.AddParameter('Path',SCCurrentRepo."Local Repo Path");
      PSRunner.AddParameter('LogPath',lTempPath + lLogFile);
      PSRunner.AddParameter('Editor',TextEditor);
      IF pFileOnly THEN
        PSRunner.AddParameter('File',lLogFile);
      PSRunner.WriteEventOnError(TRUE);
      PSRunner.BeginInvoke;
      REPEAT
        SLEEP(1000);
      UNTIL PSRunner.IsCompleted;
    END;

    LOCAL PROCEDURE ViewStatus@17();
    VAR
      lTempPath@1000 : Text;
      lLogFile@1002 : Text;
    BEGIN
      lTempPath := GetPathTEMP;
      lLogFile := 'RepoStatusLog.log';
      PSRunner.AddCommand('Git-Status');
      PSRunner.AddParameter('Path',SCCurrentRepo."Local Repo Path");
      PSRunner.AddParameter('LogPath',lTempPath + lLogFile);
      PSRunner.AddParameter('Editor',TextEditor);
      PSRunner.WriteEventOnError(TRUE);
      PSRunner.BeginInvoke;
      REPEAT
        SLEEP(1000);
      UNTIL PSRunner.IsCompleted;
    END;

    LOCAL PROCEDURE CompareFile@21(pCompareDBFile@1000 : Boolean);
    BEGIN
      ///////////////////////////////////////
      // pCompareDBFile = FALSE  -> Compare the File in the Repo Directory
      // pCompareDBFile = TRUE   -> Export Object to Temp and Compare
      //////////////////////////////////////

      SelectCompareRepo(NOT pCompareDBFile);
      IF pCompareDBFile THEN
        ExportToRepo(TRUE); //temp location

      GetFile1(SCCurrentRepo,Rec,pCompareDBFile);
      GetFile2(SCCompareRepo,Rec,FALSE);
      PSRunner.AddCommand('Git-CompareFile');
      PSRunner.AddParameter('Path1',FileName1);
      PSRunner.AddParameter('Path2',FileName2);
      PSRunner.AddParameter('Editor',ComparePath);
      PSRunner.WriteEventOnError(TRUE);
      PSRunner.BeginInvoke;
      REPEAT
        SLEEP(1000);
      UNTIL PSRunner.IsCompleted;
    END;

    LOCAL PROCEDURE DoCommit@25();
    VAR
      lTempPath@1001 : Text;
      lLogFile@1000 : Text;
    BEGIN
      PSRunner.AddCommand('Git-OpenGui');
      PSRunner.AddParameter('Path',SCCurrentRepo."Local Repo Path");
      PSRunner.WriteEventOnError(TRUE);
      PSRunner.BeginInvoke;
      REPEAT
        SLEEP(1000);
      UNTIL PSRunner.IsCompleted;

      lTempPath := GetPathTEMP;
      lLogFile := 'RepoDiffLog.log';
      PSRunner.AddCommand('Git-Diff');
      PSRunner.AddParameter('Path',SCCurrentRepo."Local Repo Path");
      PSRunner.AddParameter('Repo',SCCurrentRepo."Upstream Repo name");
      PSRunner.AddParameter('Branch',SCCurrentRepo.Branch);
      PSRunner.AddParameter('LogPath',lTempPath + lLogFile);
      PSRunner.AddParameter('Editor',TextEditor);
      PSRunner.WriteEventOnError(TRUE);
      PSRunner.BeginInvoke;
      REPEAT
        SLEEP(1000);
      UNTIL PSRunner.IsCompleted;

      HandleLastCommitFromFile(lTempPath + lLogFile);

      DoPush;
    END;

    LOCAL PROCEDURE DoPush@26();
    VAR
      lTempPath@1001 : Text;
      lLogFile@1000 : Text;
    BEGIN
      IF CONFIRM(txt_Push,TRUE) THEN
      BEGIN
        lTempPath := GetPathTEMP;
        lLogFile := 'RepoPushLog.log';
        PSRunner.AddCommand('Git-PushUp');
        PSRunner.AddParameter('Path',SCCurrentRepo."Local Repo Path");
        PSRunner.AddParameter('Repo',SCCurrentRepo."Upstream Repo name");
        PSRunner.AddParameter('Branch',SCCurrentRepo.Branch);
        PSRunner.AddParameter('LogPath',lTempPath + lLogFile);
        PSRunner.AddParameter('Editor',TextEditor);
        PSRunner.WriteEventOnError(TRUE);
        PSRunner.BeginInvoke;
        REPEAT
          SLEEP(1000);
        UNTIL PSRunner.IsCompleted;
      END ELSE
        ERROR(txt_Abort);
    END;

    LOCAL PROCEDURE SetupRepos@28();
    BEGIN
      SCSetup.RESET;
      SCSetup.SETRANGE(User_ID,USERID);
      SCSetup.SETRANGE(Type,SCSetup.Type::Repo);
      Window.OPEN(txt_createRepo);
      IF SCSetup.FINDSET THEN
        REPEAT
          Window.UPDATE(1,FORMAT(SCSetup.Name));
          IF NOT EXISTS(SCSetup."Local Repo Path") THEN
          BEGIN
            PSRunner.AddCommand('Git-Clone');
            PSRunner.AddParameter('LocalParentPath',SCSetup."Local Project Path");
            PSRunner.AddParameter('HttpPath',SCSetup."Remote Repo Path");
            PSRunner.WriteEventOnError(TRUE);
            PSRunner.BeginInvoke;
            REPEAT
              SLEEP(1000);
            UNTIL PSRunner.IsCompleted;
          END;
        UNTIL SCSetup.NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE OpenPsRunspace@1100084002();
    BEGIN
      SCSetup.RESET;
      SCSetup.SETRANGE(User_ID,USERID);
      SCSetup.SETRANGE(Type,SCSetup.Type::"PS Module");
      IF NOT SCSetup.FINDSET THEN
        ERROR(err001,SCSetup.Type::"PS Module");

      PSRunner := PSRunner.CreateInSandbox;
      PSRunner.WriteEventOnError := TRUE;
      REPEAT
        PSRunner.ImportModule(SCSetup."Local Repo Path");
      UNTIL SCSetup.NEXT = 0;

      //PSRunner.ImportModule('C:\Program Files\Microsoft Dynamics NAV\90\Service\NavAdminTool.ps1');
      //PSRunner.ImportModule('C:\Program Files (x86)\Microsoft Dynamics NAV\90\RoleTailored Client\Microsoft.Dynamics.Nav.Model.Tools.psd1');
      //PSRunner.ImportModule('C:\PSScripts\GitCmdLet.psm1');
    END;

    LOCAL PROCEDURE ClosePsRunspace@1100084003();
    BEGIN
    END;

    LOCAL PROCEDURE ColorChange@8();
    VAR
      lfound@1001 : Integer;
    BEGIN
      WITH SCMonitor DO
      BEGIN
        RESET;
        SETRANGE(ObjectType,Rec.Type);
        SETRANGE(ObjectID,Rec.ID);
        IF NOT FINDLAST THEN BEGIN
          ChangedBy := '';
          txtStyle := 'Standard'
        END ELSE BEGIN
          lfound := 0;

          SETFILTER(User_ID,'%1','@'+USERID);
          IF FINDLAST THEN BEGIN
            txtStyle := 'StrongAccent';
            lfound := lfound + 1;
            ChangedBy := USERID;
          END;

          SETRANGE(User_ID);
          SETFILTER(User_ID,'<>%1','@'+USERID);
          IF FINDLAST THEN
          BEGIN
            txtStyle := 'Ambiguous';
            lfound := lfound + 1;
            ChangedBy := User_ID;
          END;

          IF lfound > 1 THEN BEGIN
            txtStyle := 'Unfavorable';
            ChangedBy := '***MANY***';
          END;
        END;
      END;
    END;

    PROCEDURE HandleLastCommitFromFile@9(pLogFile@1006 : Text);
    VAR
      ClientFile@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File" RUNONCLIENT;
      ClientFileLines@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IEnumerable`1";
      line@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IEnumerator`1";
      BufferFile@1003 : Text[250];
      BufferType@1004 : Text[3];
      BufferID@1005 : Integer;
    BEGIN
      IF NOT ClientFile.Exists(pLogFile) THEN
        ERROR(err002,pLogFile);

      ClientFileLines := ClientFile.ReadAllLines(pLogFile);

      line := ClientFileLines.GetEnumerator;
      WHILE line.MoveNext DO
      BEGIN
        BufferFile := FORMAT(line.Current);
        BufferType := COPYSTR(BufferFile,1,3);
        EVALUATE(BufferID,COPYSTR(BufferFile,4,STRPOS(BufferFile,'.') - 4));

        SCMonitor.RESET;
        SCMonitor.SETRANGE(ObjectType,Prefix2Type(BufferType));
        SCMonitor.SETRANGE(ObjectID,BufferID);
        IF SCMonitor.FINDSET THEN
          SCMonitor.DELETEALL;

      END;
    END;

    BEGIN
    {
      Created For Source Control - GIT
    }
    END.
  }
}

OBJECT Page 77778 Source Control Monitor Lines
{
  OBJECT-PROPERTIES
  {
    Date=01/03/19;
    Time=01:01:11 PM;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table77778;
    PageType=List;
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1101770015;1;Group  ;
                GroupType=Repeater }

    { 1101770014;2;Field  ;
                SourceExpr=Changed;
                Editable=FALSE }

    { 1101770013;2;Field  ;
                SourceExpr=User_ID;
                Editable=FALSE }

    { 1101770012;2;Field  ;
                SourceExpr=ObjectType;
                Editable=FALSE }

    { 1101770011;2;Field  ;
                SourceExpr=ObjectID;
                Visible=FALSE;
                Editable=FALSE }

    { 1101770010;2;Field  ;
                SourceExpr=ObjectName;
                Visible=FALSE;
                Editable=FALSE }

    { 1101770009;2;Field  ;
                SourceExpr=DatabaseName;
                Editable=false }

    { 1101770008;2;Field  ;
                SourceExpr=ChangeType;
                Editable=FALSE }

    { 1101770007;2;Field  ;
                SourceExpr=VersionList;
                Editable=FALSE }

    { 1101770006;2;Field  ;
                SourceExpr=CompanyName;
                Editable=FALSE }

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Page 77779 Source Control Setup
{
  OBJECT-PROPERTIES
  {
    Date=28/02/19;
    Time=12:05:26 PM;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    SourceTable=Table77777;
    DelayedInsert=Yes;
    PageType=List;
    OnOpenPage=BEGIN
                 SETRANGE(User_ID,USERID);
               END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                SourceExpr=User_ID }

    { 4   ;2   ;Field     ;
                SourceExpr=Type }

    { 10  ;2   ;Field     ;
                SourceExpr=Name }

    { 5   ;2   ;Field     ;
                SourceExpr="Local Repo Path" }

    { 13  ;2   ;Field     ;
                SourceExpr="Local Project Path" }

    { 6   ;2   ;Field     ;
                SourceExpr="Remote Repo Path" }

    { 12  ;2   ;Field     ;
                SourceExpr="Upstream Repo name" }

    { 7   ;2   ;Field     ;
                SourceExpr=Branch }

    { 8   ;2   ;Field     ;
                SourceExpr="DB Server" }

    { 9   ;2   ;Field     ;
                SourceExpr="DB Name" }

    { 11  ;2   ;Field     ;
                SourceExpr=Default }

  }
  CODE
  {

    BEGIN
    END.
  }
}

